openapi: 3.1.0
info:
  title: CampusRide
  version: 0.1.0
paths:
  /api/rides:
    get:
      tags:
        - Rides and Bookings
      summary: Get Rides
      operationId: get_rides_api_rides_get
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: null
            title: Limit
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRidesSchema"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
    post:
      tags:
        - Rides and Bookings
      summary: Create Ride
      operationId: create_ride_api_rides_post
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RideCreate"
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /api/rides/{ride_id}:
    get:
      tags:
        - Rides and Bookings
      summary: Get Ride
      operationId: get_ride_api_Returns_specific_ride_details___rides__ride_id__get
      parameters:
        - name: ride_id
          in: path
          required: true
          schema:
            type: integer
            title: Ride Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
    put:
      tags:
        - Rides and Bookings
      summary: Update Ride
      operationId: update_ride_api_rides__ride_id__put
      parameters:
        - name: ride_id
          in: path
          required: true
          schema:
            type: integer
            title: Ride Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RideUpdate"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ride"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
    delete:
      tags:
        - Rides and Bookings
      summary: Delete Ride
      operationId: delete_ride_api_rides__ride_id__delete
      parameters:
        - name: ride_id
          in: path
          required: true
          schema:
            type: integer
            title: Ride Id
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register User
      operationId: register_user_auth_register_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login User
      operationId: login_user_auth_login_post
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Body_login_user_auth_login_post"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get Current User
      operationId: get_current_user_auth_me_get
      security:
        - OAuth2PasswordBearer: []
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
  /auth/rides/{ride_id}/book:
    post:
      tags:
        - Authentication
      summary: Book A Ride
      operationId: book_a_ride_auth_rides__ride_id__book_post
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: ride_id
          in: path
          required: true
          schema:
            type: integer
            title: Ride Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
components:
  schemas:
    Body_login_user_auth_login_post:
      type: object
      required:
        - username
        - password
      properties:
        grant_type:
          anyOf:
            - type: string
              pattern: password
            - type: null
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ""
        client_id:
          anyOf:
            - type: string
            - type: null
          title: Client Id
        client_secret:
          anyOf:
            - type: string
            - type: null
          title: Client Secret
    Booking:
      type: object
      required:
        - passenger_name
        - id
        - ride_id
        - created_at
      properties:
        passenger_name:
          type: string
          maxLength: 30
          minLength: 2
          title: Passenger Name
        notes:
          anyOf:
            - type: string
            - type: null
          title: Notes
        id:
          type: integer
          title: Id
        ride_id:
          type: integer
          title: Ride Id
        created_at:
          type: string
          format: date-time
          title: Created At
    GetRidesSchema:
      type: object
      required:
        - rides
      properties:
        rides:
          type: array
          items:
            $ref: "#/components/schemas/Ride"
    HTTPValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
    Ride:
      type: object
      required:
        - departure_location
        - arrival_location
        - departure_time
        - available_seats
        - driver_name
        - id
        - created_at
        - updated_at
      properties:
        departure_location:
          type: string
          maxLength: 100
          minLength: 2
          title: Departure Location
        arrival_location:
          type: string
          maxLength: 100
          minLength: 2
          title: Arrival Location
        departure_time:
          type: string
          format: date-time
          title: Departure Time
        available_seats:
          type: integer
          minimum: 0
          maximum: 8
          title: Available Seats
        driver_name:
          type: string
          maxLength: 30
          minLength: 2
          title: Driver Name
        id:
          type: integer
          title: Id
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: null
          title: Updated At
    RideCreate:
      type: object
      required:
        - departure_location
        - arrival_location
        - departure_time
        - available_seats
        - driver_name
      properties:
        departure_location:
          type: string
          maxLength: 100
          minLength: 2
          title: Departure Location
        arrival_location:
          type: string
          maxLength: 100
          minLength: 2
          title: Arrival Location
        departure_time:
          type: string
          format: date-time
          title: Departure Time
        available_seats:
          type: integer
          minimum: 0
          maximum: 8
          title: Available Seats
        driver_name:
          type: string
          maxLength: 30
          minLength: 2
          title: Driver Name
    RideUpdate:
      type: object
      required:
        - departure_time
        - available_seats
      properties:
        departure_location:
          anyOf:
            - type: string
              maxLength: 100
              minLength: 2
            - type: null
          title: Departure Location
        arrival_location:
          anyOf:
            - type: string
              maxLength: 100
              minLength: 2
            - type: null
          title: Arrival Location
        departure_time:
          anyOf:
            - type: string
              format: date-time
            - type: null
          title: Departure Time
        available_seats:
          anyOf:
            - type: integer
              minimum: 0
              maximum: 8
            - type: null
          title: Available Seats
        driver_name:
          anyOf:
            - type: string
              maxLength: 30
              minLength: 2
            - type: null
          title: Driver Name
    Token:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          title: Username
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          title: Password
    UserResponse:
      type: object
      required:
        - username
        - email
        - id
      properties:
        username:
          type: string
          title: Username
        email:
          type: string
          title: Email
        id:
          type: integer
          title: Id
    ValidationError:
      type: object
      required:
        - loc
        - msg
        - type
      properties:
        loc:
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          tokenUrl: auth/login
          scopes: {}
